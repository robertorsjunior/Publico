/****************
EXECUTE VALIDE_DIVERGENCIAS 'COLA_PESSOA_ROBERTO', 'COLA_PESSOA_SELENIUM'

-- DROP PROCEDURE DBO.VALIDE_DIVERGENCIAS 
/* 
IF OBJECT_ID (N'DBO.VALIDE_DIVERGENCIAS', N'P') IS NOT NULL 
	DROP PROCEDURE DBO.VALIDE_DIVERGENCIAS
*/ 
*****************/


CREATE PROCEDURE DBO.VALIDE_DIVERGENCIAS @TABELA_ORIGEM VARCHAR(100), @TABELA_DESTINO VARCHAR(100)

AS 
BEGIN 

	SET NOCOUNT ON;
  
	DECLARE @SQL NVARCHAR(MAX);
	DECLARE @PRIMARY VARCHAR(100);
	DECLARE @CAMPO_CHAVE VARCHAR(8000)

	SET @PRIMARY = 'PRIMARY KEY';

	/***************************************
	** PREPARAR AS CHAVES PRIMÁRIAS
	****************************************/
	IF OBJECT_ID (N'#TRECHO_INNER', N'U') IS NOT NULL 
		DROP TABLE #TRECHO_INNER

	IF OBJECT_ID (N'#RESULTADO', N'U') IS NOT NULL 
		DROP TABLE #RESULTADO

	IF OBJECT_ID (N'#COLUNAS_AGRUPADAS', N'U') IS NOT NULL 
		DROP TABLE #COLUNAS_AGRUPADAS

	IF OBJECT_ID (N'#COLUNAS_TEMPORARIAS', N'U') IS NOT NULL 
		DROP TABLE #COLUNAS_TEMPORARIAS

	IF OBJECT_ID (N'#DIVERGENTES', N'U') IS NOT NULL 
		DROP TABLE #DIVERGENTES


	CREATE TABLE #TRECHO_INNER (COLUNA VARCHAR(100))
	CREATE TABLE #COLUNAS_AGRUPADAS (COLUNA VARCHAR(8000))
	CREATE TABLE #RESULTADO (CHAVE VARCHAR(800), CAMPO VARCHAR(800), VALOR_ANTERIOR VARCHAR(800), VALOR_ATUAL VARCHAR(800))
	CREATE TABLE #COLUNAS_TEMPORARIAS (COLUNA VARCHAR(8000))
	CREATE TABLE #DIVERGENTES ( TEMPCOLUMN INT );

	SET @SQL = N' INSERT INTO #TRECHO_INNER SELECT C.COLUMN_NAME FROM  INFORMATION_SCHEMA.TABLE_CONSTRAINTS T  '
				+ N' JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE C  ON C.CONSTRAINT_NAME=T.CONSTRAINT_NAME  WHERE  C.TABLE_NAME=''' + @TABELA_ORIGEM + ''''
				+ N'AND T.CONSTRAINT_TYPE=''' + @PRIMARY + ''''

	EXECUTE SP_EXECUTESQL @SQL
	IF @@ROWCOUNT = 0
	BEGIN 
		SET @SQL = N' INSERT INTO #TRECHO_INNER SELECT C.COLUMN_NAME FROM  INFORMATION_SCHEMA.TABLE_CONSTRAINTS T  '
		+ N' JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE C  ON C.CONSTRAINT_NAME=T.CONSTRAINT_NAME  WHERE  C.TABLE_NAME=''' + @TABELA_ORIGEM + ''''
		+ N'AND T.CONSTRAINT_TYPE=''' + @PRIMARY + ''''
		
		EXECUTE SP_EXECUTESQL @SQL
	END 

	EXECUTE SP_EXECUTESQL @SQL
	IF @@ROWCOUNT = 0
	BEGIN 
		SET @SQL = N' INSERT INTO #TRECHO_INNER SELECT C.COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS C WHERE  C.ORDINAL_POSITION = 1 AND C.TABLE_NAME = ''' + @TABELA_ORIGEM + ''''
		
		EXECUTE SP_EXECUTESQL @SQL
	END 

	DECLARE @CLAUSULA_INNER VARCHAR(100)

	/***********************
	* CRIANDO TABELAS TEMPORARIAS
	*****************/
	DECLARE @COLUNAS VARCHAR(8000)

	SET @SQL = N' INSERT INTO #COLUNAS_AGRUPADAS SELECT STRING_AGG(''@'' + COLUMN_NAME, '', '')'
		+ N' FROM INFORMATION_SCHEMA.COLUMNS'
		+ N' WHERE TABLE_NAME = N''' + @TABELA_ORIGEM + ''''
		+ N' GROUP BY TABLE_NAME'

	EXECUTE SP_EXECUTESQL @SQL

	SELECT @COLUNAS = REPLACE(COLUNA, '@', 'TMP.') + ', ' + REPLACE(COLUNA, '@', 'DEST.')
	FROM #COLUNAS_AGRUPADAS

	SELECT @CLAUSULA_INNER = STRING_AGG('TMP.' + COLUNA +  ' = DEST.' + COLUNA, 'AND ') 
	FROM   #TRECHO_INNER

	
	SET @SQL = N' INSERT INTO #COLUNAS_TEMPORARIAS SELECT COLUMN_NAME + '' '' + DATA_TYPE + '' '' + CASE WHEN CHARACTER_MAXIMUM_LENGTH > 0 THEN  + ''('' + CONVERT(VARCHAR(10), CHARACTER_MAXIMUM_LENGTH) + '')''   ELSE '''' END'
	+ N' FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N''' + @TABELA_ORIGEM + ''''
	
	PRINT @SQL
	EXECUTE SP_EXECUTESQL @SQL

	SELECT @COLUNAS = REPLACE(COLUNA, '@', 'TMP.') + ', ' + REPLACE(COLUNA, '@', 'DEST.')
	FROM #COLUNAS_AGRUPADAS

	DECLARE @DADOSCOLUNA VARCHAR(8000)
	SET @SQL = N'DECLARE CURSOR2 CURSOR FOR SELECT COLUNA FROM #COLUNAS_TEMPORARIAS'

	-- CURSOR PARA PERCORRER OS REGISTROS
	EXECUTE SP_EXECUTESQL @SQL

	--ABRINDO CURSOR
	OPEN CURSOR2
 
	-- LENDO A PRÓXIMA LINHA
	FETCH NEXT FROM CURSOR2 INTO @DADOSCOLUNA
 
	-- PERCORRENDO LINHAS DO CURSOR (ENQUANTO HOUVEREM)
	WHILE @@FETCH_STATUS = 0
	BEGIN
	 
		SET @SQL = 'ALTER TABLE #DIVERGENTES ADD ' + @DADOSCOLUNA;
		PRINT @SQL
		EXECUTE SP_EXECUTESQL @SQL

		-- LENDO A PRÓXIMA LINHA
		FETCH NEXT FROM CURSOR2 INTO @DADOSCOLUNA
	END
 
	-- FECHANDO CURSOR PARA LEITURA
	CLOSE CURSOR2
 
	-- FINALIZADO O CURSOR
	DEALLOCATE CURSOR2

	SET @SQL = 'ALTER TABLE #DIVERGENTES DROP COLUMN TEMPCOLUMN'
	EXECUTE SP_EXECUTESQL @SQL

	PRINT 'INSERT DIVERGENTES'
	SET @SQL = N'INSERT INTO #DIVERGENTES SELECT * FROM ' + QUOTENAME(@TABELA_ORIGEM)
		+ N' EXCEPT SELECT * FROM ' + QUOTENAME(@TABELA_DESTINO)
	PRINT @SQL
	EXECUTE SP_EXECUTESQL @SQL
	PRINT 'POST insert' 

	DECLARE @CHAVE VARCHAR(800), @CAMPO VARCHAR(800), @VALOR_ANTERIOR VARCHAR(800), @VALOR_ATUAL VARCHAR(800)
	
	SET @SQL = N'DECLARE CURSOR1 CURSOR FOR SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = ''' + @TABELA_ORIGEM  + ''''

	-- CURSOR PARA PERCORRER OS REGISTROS
	EXECUTE SP_EXECUTESQL @SQL

	--ABRINDO CURSOR
	OPEN CURSOR1
 
	-- LENDO A PRÓXIMA LINHA
	FETCH NEXT FROM CURSOR1 INTO @CAMPO
 
	-- PERCORRENDO LINHAS DO CURSOR (ENQUANTO HOUVEREM)
	WHILE @@FETCH_STATUS = 0
	BEGIN
 
		-- EXECUTANDO AS ROTINAS DESEJADAS MANIPULANDO O REGISTRO
		SET @SQL = N' INSERT INTO #RESULTADO SELECT DEST.ID, ''' + @CAMPO + ''',  TMP.' + @CAMPO + ', DEST.' + @CAMPO
		+ N' FROM #DIVERGENTES TMP LEFT JOIN ' + @TABELA_DESTINO + ' DEST ON TMP.ID = DEST.ID'
		PRINT @SQL
		EXECUTE SP_EXECUTESQL @SQL


		-- EXECUTANDO AS ROTINAS DESEJADAS MANIPULANDO O REGISTRO
		SET @SQL = N' INSERT INTO #RESULTADO SELECT DEST.ID, ''' + @CAMPO + ''',  TMP.' + @CAMPO + ', DEST.' + @CAMPO
		+ N' FROM ' + @TABELA_ORIGEM  + ' TMP RIGHT JOIN ' + @TABELA_DESTINO  + ' DEST ON TMP.ID = DEST.ID WHERE TMP.ID IS NULL'
		PRINT @SQL
		EXECUTE SP_EXECUTESQL @SQL

		-- LENDO A PRÓXIMA LINHA
		FETCH NEXT FROM CURSOR1 INTO @CAMPO
	END
 
	-- FECHANDO CURSOR PARA LEITURA
	CLOSE CURSOR1
 
	-- FINALIZADO O CURSOR
	DEALLOCATE CURSOR1

	SELECT @CAMPO_CHAVE = COLUNA 
	FROM   #TRECHO_INNER

	SET @SQL = N'SELECT * FROM #RESULTADO WHERE VALOR_ANTERIOR <> VALOR_ATUAL OR ((VALOR_ATUAL IS NULL OR VALOR_ANTERIOR IS NULL) AND CAMPO = ''' + @CAMPO_CHAVE + ''')'

	EXECUTE SP_EXECUTESQL @SQL
END


